// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// updateAgent_SIR
int updateAgent_SIR(int current_state, double prob);
RcppExport SEXP _Catalyst_updateAgent_SIR(SEXP current_stateSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type current_state(current_stateSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(updateAgent_SIR(current_state, prob));
    return rcpp_result_gen;
END_RCPP
}
// AMTime_SIR
IntegerVector AMTime_SIR(IntegerVector A, NumericVector prob_inf, NumericVector prob_rec);
RcppExport SEXP _Catalyst_AMTime_SIR(SEXP ASEXP, SEXP prob_infSEXP, SEXP prob_recSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob_inf(prob_infSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob_rec(prob_recSEXP);
    rcpp_result_gen = Rcpp::wrap(AMTime_SIR(A, prob_inf, prob_rec));
    return rcpp_result_gen;
END_RCPP
}
// get_n_nbr_inf
IntegerVector get_n_nbr_inf(List nbr_list, IntegerVector inf_inds);
RcppExport SEXP _Catalyst_get_n_nbr_inf(SEXP nbr_listSEXP, SEXP inf_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbr_list(nbr_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type inf_inds(inf_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_n_nbr_inf(nbr_list, inf_inds));
    return rcpp_result_gen;
END_RCPP
}
// updateNeighbors
List updateNeighbors(List orig_nbrs, List preventions_nbrs, IntegerVector preventions_inds);
RcppExport SEXP _Catalyst_updateNeighbors(SEXP orig_nbrsSEXP, SEXP preventions_nbrsSEXP, SEXP preventions_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type orig_nbrs(orig_nbrsSEXP);
    Rcpp::traits::input_parameter< List >::type preventions_nbrs(preventions_nbrsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type preventions_inds(preventions_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNeighbors(orig_nbrs, preventions_nbrs, preventions_inds));
    return rcpp_result_gen;
END_RCPP
}
// removeNeighbors
List removeNeighbors(List orig_nbrs, List preventions_nbrs, IntegerVector inf_inds, IntegerVector preventions_inds);
RcppExport SEXP _Catalyst_removeNeighbors(SEXP orig_nbrsSEXP, SEXP preventions_nbrsSEXP, SEXP inf_indsSEXP, SEXP preventions_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type orig_nbrs(orig_nbrsSEXP);
    Rcpp::traits::input_parameter< List >::type preventions_nbrs(preventions_nbrsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type inf_inds(inf_indsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type preventions_inds(preventions_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(removeNeighbors(orig_nbrs, preventions_nbrs, inf_inds, preventions_inds));
    return rcpp_result_gen;
END_RCPP
}
// rcppRev
IntegerVector rcppRev(IntegerVector x);
RcppExport SEXP _Catalyst_rcppRev(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppRev(x));
    return rcpp_result_gen;
END_RCPP
}
// removeClosureNbrs
List removeClosureNbrs(List nbr_list, IntegerVector cat_inds);
RcppExport SEXP _Catalyst_removeClosureNbrs(SEXP nbr_listSEXP, SEXP cat_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbr_list(nbr_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cat_inds(cat_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(removeClosureNbrs(nbr_list, cat_inds));
    return rcpp_result_gen;
END_RCPP
}
// addClosureNbrs
List addClosureNbrs(List nbr_list, IntegerVector cat_inds);
RcppExport SEXP _Catalyst_addClosureNbrs(SEXP nbr_listSEXP, SEXP cat_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nbr_list(nbr_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cat_inds(cat_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(addClosureNbrs(nbr_list, cat_inds));
    return rcpp_result_gen;
END_RCPP
}
// deg_to_rad_rcpp
double deg_to_rad_rcpp(double degree);
RcppExport SEXP _Catalyst_deg_to_rad_rcpp(SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(deg_to_rad_rcpp(degree));
    return rcpp_result_gen;
END_RCPP
}
// dist_haversine_rcpp
double dist_haversine_rcpp(double xlon, double xlat, double ylon, double ylat);
RcppExport SEXP _Catalyst_dist_haversine_rcpp(SEXP xlonSEXP, SEXP xlatSEXP, SEXP ylonSEXP, SEXP ylatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xlon(xlonSEXP);
    Rcpp::traits::input_parameter< double >::type xlat(xlatSEXP);
    Rcpp::traits::input_parameter< double >::type ylon(ylonSEXP);
    Rcpp::traits::input_parameter< double >::type ylat(ylatSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_haversine_rcpp(xlon, xlat, ylon, ylat));
    return rcpp_result_gen;
END_RCPP
}
// nbrsByDist
List nbrsByDist(NumericMatrix M, double thresh, int max_nbrs);
RcppExport SEXP _Catalyst_nbrsByDist(SEXP MSEXP, SEXP threshSEXP, SEXP max_nbrsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type max_nbrs(max_nbrsSEXP);
    rcpp_result_gen = Rcpp::wrap(nbrsByDist(M, thresh, max_nbrs));
    return rcpp_result_gen;
END_RCPP
}
// AMSIR
IntegerMatrix AMSIR(int ll, int T, IntegerVector A0, List nbrList, double beta, double gamma);
RcppExport SEXP _Catalyst_AMSIR(SEXP llSEXP, SEXP TSEXP, SEXP A0SEXP, SEXP nbrListSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ll(llSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< List >::type nbrList(nbrListSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(AMSIR(ll, T, A0, nbrList, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _Catalyst_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
// sirLoopGroups
NumericMatrix sirLoopGroups(NumericVector x, NumericVector beta_vec, NumericVector gamma_vec, int T, int prob_type);
RcppExport SEXP _Catalyst_sirLoopGroups(SEXP xSEXP, SEXP beta_vecSEXP, SEXP gamma_vecSEXP, SEXP TSEXP, SEXP prob_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_vec(gamma_vecSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type prob_type(prob_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sirLoopGroups(x, beta_vec, gamma_vec, T, prob_type));
    return rcpp_result_gen;
END_RCPP
}
// totalX
NumericMatrix totalX(NumericMatrix X);
RcppExport SEXP _Catalyst_totalX(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(totalX(X));
    return rcpp_result_gen;
END_RCPP
}
// sirLoop
NumericVector sirLoop(NumericVector x, double beta, double gamma, int T, int prob_type);
RcppExport SEXP _Catalyst_sirLoop(SEXP xSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP TSEXP, SEXP prob_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type prob_type(prob_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sirLoop(x, beta, gamma, T, prob_type));
    return rcpp_result_gen;
END_RCPP
}
// initializeNeighbors
std::map<int, IntegerVector> initializeNeighbors(IntegerMatrix env_mat);
RcppExport SEXP _Catalyst_initializeNeighbors(SEXP env_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type env_mat(env_matSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeNeighbors(env_mat));
    return rcpp_result_gen;
END_RCPP
}
// loglike_SIR_CM
double loglike_SIR_CM(int T, NumericVector pt, double gamma, NumericMatrix X, int N);
RcppExport SEXP _Catalyst_loglike_SIR_CM(SEXP TSEXP, SEXP ptSEXP, SEXP gammaSEXP, SEXP XSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_SIR_CM(T, pt, gamma, X, N));
    return rcpp_result_gen;
END_RCPP
}
// UtoA_SIR
IntegerMatrix UtoA_SIR(IntegerMatrix U, int Tmax);
RcppExport SEXP _Catalyst_UtoA_SIR(SEXP USEXP, SEXP TmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type Tmax(TmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(UtoA_SIR(U, Tmax));
    return rcpp_result_gen;
END_RCPP
}
// AtoU_SIR
IntegerMatrix AtoU_SIR(IntegerMatrix A);
RcppExport SEXP _Catalyst_AtoU_SIR(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(AtoU_SIR(A));
    return rcpp_result_gen;
END_RCPP
}
// AtoX
IntegerMatrix AtoX(IntegerMatrix A, int K);
RcppExport SEXP _Catalyst_AtoX(SEXP ASEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(AtoX(A, K));
    return rcpp_result_gen;
END_RCPP
}
// extractRowA
IntegerMatrix extractRowA(IntegerMatrix A, int t);
RcppExport SEXP _Catalyst_extractRowA(SEXP ASEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(extractRowA(A, t));
    return rcpp_result_gen;
END_RCPP
}
// extractColA
IntegerMatrix extractColA(IntegerMatrix A, int n);
RcppExport SEXP _Catalyst_extractColA(SEXP ASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(extractColA(A, n));
    return rcpp_result_gen;
END_RCPP
}
// UtoX_SIR
IntegerMatrix UtoX_SIR(IntegerMatrix U, int T);
RcppExport SEXP _Catalyst_UtoX_SIR(SEXP USEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(UtoX_SIR(U, T));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Catalyst_updateAgent_SIR", (DL_FUNC) &_Catalyst_updateAgent_SIR, 2},
    {"_Catalyst_AMTime_SIR", (DL_FUNC) &_Catalyst_AMTime_SIR, 3},
    {"_Catalyst_get_n_nbr_inf", (DL_FUNC) &_Catalyst_get_n_nbr_inf, 2},
    {"_Catalyst_updateNeighbors", (DL_FUNC) &_Catalyst_updateNeighbors, 3},
    {"_Catalyst_removeNeighbors", (DL_FUNC) &_Catalyst_removeNeighbors, 4},
    {"_Catalyst_rcppRev", (DL_FUNC) &_Catalyst_rcppRev, 1},
    {"_Catalyst_removeClosureNbrs", (DL_FUNC) &_Catalyst_removeClosureNbrs, 2},
    {"_Catalyst_addClosureNbrs", (DL_FUNC) &_Catalyst_addClosureNbrs, 2},
    {"_Catalyst_deg_to_rad_rcpp", (DL_FUNC) &_Catalyst_deg_to_rad_rcpp, 1},
    {"_Catalyst_dist_haversine_rcpp", (DL_FUNC) &_Catalyst_dist_haversine_rcpp, 4},
    {"_Catalyst_nbrsByDist", (DL_FUNC) &_Catalyst_nbrsByDist, 3},
    {"_Catalyst_AMSIR", (DL_FUNC) &_Catalyst_AMSIR, 6},
    {"_Catalyst_rcpp_hello", (DL_FUNC) &_Catalyst_rcpp_hello, 0},
    {"_Catalyst_sirLoopGroups", (DL_FUNC) &_Catalyst_sirLoopGroups, 5},
    {"_Catalyst_totalX", (DL_FUNC) &_Catalyst_totalX, 1},
    {"_Catalyst_sirLoop", (DL_FUNC) &_Catalyst_sirLoop, 5},
    {"_Catalyst_initializeNeighbors", (DL_FUNC) &_Catalyst_initializeNeighbors, 1},
    {"_Catalyst_loglike_SIR_CM", (DL_FUNC) &_Catalyst_loglike_SIR_CM, 5},
    {"_Catalyst_UtoA_SIR", (DL_FUNC) &_Catalyst_UtoA_SIR, 2},
    {"_Catalyst_AtoU_SIR", (DL_FUNC) &_Catalyst_AtoU_SIR, 1},
    {"_Catalyst_AtoX", (DL_FUNC) &_Catalyst_AtoX, 2},
    {"_Catalyst_extractRowA", (DL_FUNC) &_Catalyst_extractRowA, 2},
    {"_Catalyst_extractColA", (DL_FUNC) &_Catalyst_extractColA, 2},
    {"_Catalyst_UtoX_SIR", (DL_FUNC) &_Catalyst_UtoX_SIR, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Catalyst(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
